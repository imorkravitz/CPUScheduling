package test;import java.util.ArrayList;import java.util.Comparator;import java.util.List;public class Algorithms {        public void FCFS(List<Proccess> list) {            float mean = 0;            int time = 0;            for (int i = 0; i < list.size(); i++) {                if (time < list.get(i).arriveTime) {                    time = list.get(i).arriveTime;                    i--;                } else {                    list.get(i).endTime = list.get(i).BurstTime + time - list.get(i).arriveTime;                    time += list.get(i).BurstTime;                }            }            for (Proccess p : list)                mean += p.endTime;            mean = mean / list.size();            System.out.println("FCFS: mean turnaround = " + mean);        }//---------------------------------------------------------------------------------------------------//    public void LCFSnp(List<Proccess> list) {        float mean = 0;        int time = 0, i = 0;        List<Proccess> procList = new ArrayList<Proccess>();        for (Proccess p : list) {            p.endTime = 0;            procList.add(new Proccess(p.arriveTime, p.BurstTime));        }        while (!procList.isEmpty()) {            if (time < procList.get(0).arriveTime)                time++;            else {                i = procList.size() - 1;                while (i > -1) {                    if (procList.get(i).arriveTime <= time) {                        list.get(i).endTime = procList.get(i).BurstTime + time - procList.get(i).arriveTime;                        time += procList.get(i).BurstTime;                        mean += list.get(i).endTime;                        procList.remove(i);                    }                    i--;                }            }        }        mean = mean / list.size();        System.out.println("LCFS (NP): mean turnaround = " + mean);    }    // --------------------------------------------------------------------------------//    public void LCFSp(List<Proccess> list) {        float mean = 0;        int time = 0, i = 0, flag = 1;        List<Proccess> procList = new ArrayList<Proccess>();        for (Proccess p : list) {            p.endTime = 0;            procList.add(new Proccess(p.arriveTime, p.BurstTime));        }        while (!procList.isEmpty()) {            flag = 1;            if (time < procList.get(0).arriveTime)                time++;            else {                i = procList.size() - 1;                while (i > -1 && flag == 1) {                    if (procList.get(i).arriveTime <= time) {                        if (procList.get(i).BurstTime == 1) {                            procList.get(i).endTime++;                            procList.get(i).BurstTime--;                            time++;                            mean += time - procList.get(i).arriveTime;                            procList.remove(i);                            flag = 0;                        } else if (procList.get(i).BurstTime > 1) {                            procList.get(i).endTime++;                            procList.get(i).BurstTime--;                            time++;                            flag = 0;                        } else if (procList.get(i).BurstTime == 0) {                            time++;                            procList.remove(i);                        }                    }                    i--;                }            }        }        mean = mean / list.size();        System.out.println("LCFS (P): mean turnaround = " + mean);    }    // --------------------------------------------------------------------------------//    public void RR(List<Proccess> list) {        float mean = 0;        int time = 0, i = 0, count = 0, flag = 1, f = 0;        List<Proccess> procList = new ArrayList<Proccess>();        for (Proccess p : list) {            p.endTime = 0;            procList.add(new Proccess(p.arriveTime, p.BurstTime));        }        while (flag == 1) {            f = 0;            flag = 0;            for (int j = 0; j < list.size(); j++) {                if (procList.get(j).arriveTime <= time) {                    if (procList.get(j).BurstTime > 0)                        f = 1;                }            }            if (f == 0)                time++;            else {                for (i = 0; i < procList.size(); i++) {                    if (procList.get(i).arriveTime <= time) {                        if (procList.get(i).BurstTime == 0) {                        }                        else if (procList.get(i).BurstTime == 1) {                            procList.get(i).BurstTime--;                            time++;                            list.get(i).endTime = time - list.get(i).arriveTime;                            while (count < list.size()) {                                i++;                                if (i == list.size())                                    i = 0;                                else if (procList.get(i).arriveTime <= time) {                                    if (procList.get(i).BurstTime == 1) {                                        procList.get(i).BurstTime--;                                        time++;                                        list.get(i).endTime = time - list.get(i).arriveTime;                                    } else if (procList.get(i).BurstTime > 1) {                                        procList.get(i).BurstTime--;                                        time++;                                    }                                }                                count++;                            }                        } else {                            procList.get(i).BurstTime--;                            procList.get(i).BurstTime--;                            time++;                            time++;                            if (procList.get(i).BurstTime == 0) {                                list.get(i).endTime = time - list.get(i).arriveTime;                            }                        }                    }                }            }            for (Proccess p : procList) {                if (p.BurstTime > 0) {                    flag = 1;                    break;                }            }        }        for (Proccess p : list) {            mean += p.endTime;        }        mean /= list.size();        System.out.println("RR: mean turnaround = " + mean);    }    // --------------------------------------------------------------------------------//    public void SJF(List<Proccess> list) {        float mean = 0;        int time = 0, i = 0, a = -1, flag = 1, f = 0, min = 0;        List<Proccess> procList = new ArrayList<Proccess>();        for (Proccess p : list) {            p.endTime = 0;            procList.add(new Proccess(p.arriveTime, p.BurstTime));        }        while (flag == 1) {            flag = 0;            min = -1;            for (int j = 0; j < list.size(); j++) {                if (procList.get(j).BurstTime > 0) {                    if (procList.get(j).arriveTime <= time) {                        f = 1;                        if (min == -1) {                            min = procList.get(j).BurstTime;                            a = j;                        } else if (min > procList.get(j).BurstTime) {                            min = procList.get(j).BurstTime;                            a = j;                        }                    }                    flag = 1;                }            }            time++;            if (f == 1) {                procList.get(a).BurstTime--;                if (procList.get(a).BurstTime == 0) {                    procList.get(a).endTime = time - procList.get(a).arriveTime;                }            }            f = 0;        }        for (Proccess p : procList) {            mean += p.endTime;        }        mean /= list.size();        System.out.println("SJF: mean turnaround = " + mean);    }}// --------------------------------------------------------------------------------//class Proccess {    int BurstTime;    int arriveTime;    int endTime;    public Proccess(int arriveTime, int BurstTime) {        this.arriveTime = arriveTime;        this.BurstTime = BurstTime;        this.endTime = 0;    }}class SortById implements Comparator<Proccess> {    public int compare(Proccess a, Proccess b) {        return a.arriveTime - b.arriveTime;    }}